//Double Link List//

#include<stdio.h>
#include<stdlib.h>
void CreateCLL( int Num);
void InsertAtEnd( int Num);
void InsertAtMid( int key,int Num);
void InsertAtBeg( int Num);
int DeleteAtBeg( void);
int DeleteAtMid( int Rnum);
int DeleteAtEnd( void);

int LinkListSearch(int Key);

void Print(void);

struct Node
{
	int Data;
	struct Node * Next;
};
typedef struct Node Node;
Node * Head;

void CreateCLL( int Num)
{
	Node * temp;
	if(Head==NULL)
	{
		Head=(Node *)malloc(sizeof(Node));
		Head->Data=Num;
		Head->Next=Head;
	}
	else
	{
		temp=Head;
		while(temp->Next!=Head)
		{
			temp=temp->Next;
		}
		temp->Next=(Node *)malloc(sizeof(Node));
		
		temp->Next->Next=Head;
		temp->Next->Data=Num;
		
	}
}
void InsertAtEnd( int Num)
{
	Node * temp;
	if(Head==NULL)
	{
		Head=(Node *)malloc(sizeof(Node));
		Head->Data=Num;
		Head->Next=Head;
	}
	else
	{
		temp=Head;
		while(temp->Next!=Head)
		{
			temp=temp->Next;
		}
		temp->Next=(Node *)malloc(sizeof(Node));
		
		temp->Next->Next=Head;
		temp->Next->Data=Num;
		
	}
}
void InsertAtBeg( int Num)
{
		Node * temp, *temp1;
	if(Head==NULL)
	{
		Head=(Node *)malloc(sizeof(Node));
		Head->Data=Num;
		Head->Next=Head;
	}
	else
	{
		temp=Head;
                                temp1=Head;
		Head=(Node *)malloc(sizeof(Node));
		Head->Data=Num;
		Head->Next=temp;
                                   while(temp1!=temp->Next)
                                         {
                                             temp=temp->Next;
                                          }
                                      temp->Next=Head;
	}
}




void InsertAtMid (int key,int Num)
{
  Node *temp,*temp1;
  if(Head==NULL)
   {
     printf("Link List Is Empty");
   }
   else
   {
    temp=Head;
     while(temp->Data!=key)
      {
         temp=temp->Next;
         if(temp==NULL)
         return;
      }
     temp1=temp->Next;
     temp->Next=(Node *)malloc(sizeof (Node));
     temp->Next->Data=Num;
     temp->Next->Next=temp1;
   } 
}
     
int DeleteAtBeg( void)
{
	Node * temp, *temp1;
                int num;
	if(Head==NULL)
	{
		return 999;
	}
	else
	{
		if(Head==Head->Next)
                                    {
                                       temp=Head;
		       Head=NULL;
		       num=temp->Data;
		       free(temp);
                                     }
                                else 
                                  {
                                    temp=Head;
                                    temp1=temp;
                                    Head=temp->Next;
                                     while(temp1!=temp->Next)
                                      {
                                        temp=temp->Next;
                                      }
                                       temp->Next=Head;
                                      num=temp1->Data;
                                      free(temp1);
                                   }
                    return num;
	}
	
}
int DeleteAtMid( int Rnum)

{
   
Node * temp,*temp1;int num;

      if(Head==NULL)

          {
            return 999;

          }
       else
         {
           if(Head—>Data==Rnum)

               {
                 
num=Head—>Data;

                    if(Head->Next!=Head)

                       {
                         
temp1=Head—>Next;

                         temp=Head;
                         
free(Head);
                         
Head=temp1;
                         
while(temp1->Next!=temp)
                          {
                            
temp1=temp1->Next;


                           }
                     temp1->Next=Head;

                      }
                 else


                    {
                     free(Head);
                     
Head=NULL;

                    }

             
return num;
            }


        else

              {
             
temp=Head;
             

while(temp->Next->Data!=Rnum)


               {
                  
temp=temp—>Next;
                  
if(temp==NULL)
                  
return 888;

                }
              

num=temp->Next->Data;

              temp1=temp—>Next->Next;

              free(temp->Next);
              
temp->Next=temp1;


              return num;


               }

    }
}

int DeleteAtEnd( void)
{
	Node * temp,*temp1;
	int num;
	if(Head==NULL)
	{
		return 999; 
	}
	else
	{
		if(Head->Next==Head)
		{
		   num=Head->Data;
		   free(Head);
		   Head=NULL;
		  
		}
		else
		{
			temp=Head;
			while(temp->Next!=NULL)
			{    
                                                               temp1=temp;
			               temp=temp->Next;
			}
                                          temp1->Next=Head;			
                                          num=temp->Data;
		           free(temp);
			
		}
	}
    return num;
}
void Print(void)
{
	Node * temp;
	temp=Head;
	if(Head==NULL)
	printf("\nCircular Link List is Empty");
	else
	{
		while(temp->Next!=Head)
		{
			printf("%d->",temp->Data);
			temp=temp->Next;
		}
		printf("%d->Head",temp->Data);
		
}
}
int LinkListSearch(int Key)
{
	Node * temp;
	int count=1;
	if(Head==NULL)
	{
		return 999; 
	}
	else
	{ temp=Head;
		while(temp->Data!=Key)
		{
			count++;
			temp=temp->Next;
			if(temp==Head)
			return 999;
			
		}
		if(temp->Data==Key)
			 return count;
	}
		
}	


int main(void)
{
	
	Head=NULL;
	int Choice,Num,Key;
	while(1)
	{
		printf("\nProgram to Illustrate Concept of Circular Link List");
		printf("\n1. Create CircularLink List");
		printf("\n2. Insert At Beg");
		printf("\n3. Insert At Mid");
		printf("\n4. Insert At End");
		printf("\n5. Delete At Beg");
		printf("\n6. Delete At Mid");
                                printf("\n7. Delete At End");
		printf("\n8. Search Element");
		printf("\n9. Print");
		printf("\n10. Exit");
		printf("\nEnter Your Choice\n");
		scanf("\n %d",&Choice);
		switch(Choice)
		{
			case 1: 
				  printf("\nEnter Number\n");
				   scanf("%d",&Num);
			      CreateCLL(Num);
			      break;
		   case 3: 
			      printf("\nEnter Key and Number \n");
			      scanf("%d %d",&Key,&Num);
			      InsertAtMid(Key,Num);
			      break;
		   case 2: 
				  printf("\nEnter Number\n");
				  scanf("%d",&Num);
			      InsertAtBeg(Num);
			      break;
		   case 4: 
				  printf("\nEnter Number\n");
				  scanf("%d",&Num);
			      InsertAtEnd(Num);
			      break;
		    case 5:
	       	       Num=DeleteAtBeg();
	       	       if(Num==999||Num==888)
	       	       printf("\nLink List is Empty");
	       	       else
	       	        printf("\nNode %d Deleted from Link List ",Num);
	       	       break;
	            case 6:
	       	       printf("\nEnter Number to Delete\n");
	       	       scanf("%d",&Key);
                                       Num=DeleteAtMid(Key);
                                       if(Num==999||Num==888)
	       	       printf("\nNumber not available in list");
	       	       else
	       	        printf("\nNode %d Deleted from Link List ",Num);
	       	       break;
                           case 7:
	       	       Num=DeleteAtEnd();
	       	       if(Num==999||Num==888)
	       	       printf("\nLink List is Empty");
	       	       else
	       	        printf("\nNode %d Deleted from Link List ",Num);
	       	       break;
	       	case 8:
			        printf("\nEnter Number\n");
				    scanf("%d",&Num);
				   Key=LinkListSearch(Num);
	       	       if(Key==999)
	       	       printf("\nLink List is Empty");
	       	       else
	       	        printf("\n Node %d Found at %d Position Link List ",Num,Key);
	       	       break;
	            case 9:
	       	       Print();
	       	       break;
	         case 10:
	       	       exit(0);
		}
	}
    
}


