//Double Link List//

#include<stdio.h>
#include<stdlib.h>
void CreateLL( int Num);
void InsertAtEnd( int Num);
void InsertAtMid( int key,int Num);
void InsertAtBeg( int Num);
int DeleteAtBeg( void);
int DeleteATMid( int Rnum);
int DeleteAtEnd( void);
void Print(void);

struct Node
{
	int Data;
                struct Node * Prev;
	struct Node * Next;
};
typedef struct Node Node;
Node * Head;

void CreateLL( int Num)
{
	Node * temp;
	if(Head==NULL)
	{
		Head=(Node *)malloc(sizeof(Node));
		Head->Prev=NULL;
                                Head->Data=Num;
		Head->Next=NULL;
	}
	else
	{
		temp=Head;
		while(temp->Next!=NULL)
		{
			temp=temp->Next;
		}
		temp->Next=(Node *)malloc(sizeof(Node));
		temp->Next->Prev=temp;
		temp->Next->Next=NULL;
		temp->Next->Data=Num;
		
	}
}
void InsertAtEnd( int Num)
{
	Node * temp;
	if(Head==NULL)
	{
		Head=(Node *)malloc(sizeof(Node));
		Head->Prev=NULL;
                                Head->Data=Num;
		Head->Next=NULL;
	}
	else
	{
		temp=Head;
		while(temp->Next!=NULL)
		{
			temp=temp->Next;
		}
		temp->Next=(Node *)malloc(sizeof(Node));
		temp->Next->Prev=temp;
		temp->Next->Next=NULL;
		temp->Next->Data=Num;
		
	}
}
void InsertAtBeg( int Num)
{
		Node * temp;
	if(Head==NULL)
	{
		Head=(Node *)malloc(sizeof(Node));
		Head->Prev=NULL;
                                Head->Data=Num;
		Head->Next=NULL;
	}
	else
	{
		temp=Head;
		Head=(Node *)malloc(sizeof(Node));
		Head->Prev=NULL;
                                Head->Data=Num;
		Head->Next=temp;
                                temp->Prev=Head;
	}
}

void InsertAtMid (int key,int Num)
{
  Node *temp,*temp1;
  if(Head==NULL)
   {
     printf("Link List Is Empty");
   }
   else
   {
    temp=Head;
     while(temp->Data!=key)
      {
         temp=temp->Next;
         if(temp==NULL)
         return;
      }
     temp1=temp->Next;
     temp->Next=(Node *)malloc(sizeof (Node));
     temp->Prev=NULL;
     temp->Next->Data=Num;
     temp->Next->Next=temp1;
     temp->Next->Next->Prev=temp->Next;
   } 
}
int DeleteAtBeg( void)
{
	Node * temp;int num;
	if(Head==NULL)
	{
		return 999;
	}
	else if(Head->Next==NULL)
	{
		temp=Head;
		Head=NULL;
		num=temp->Data;
		free(temp);
		return num;
	}
               else
                   {
                     temp=Head;
                     Head=temp->Next;
                     num=temp->Data;
                     Head->Prev=NULL;
                     free(temp);
                     return num;
                   }
	
}

int DeleteAtMid( int Rnum)

{
   
Node * temp,*temp1;int num;

      if(Head==NULL)

          {
            return 999;

          }
       else
         {
           if(Head—>Data==Rnum)

               {
                    
num=Head—>Data;

                    
temp=Head—>Next;
                    
free(Head);
                    
Head=temp;
                    return num;
               }
               else
                 {
                         temp=Head;

                         temp1=temp;

                         
                         
while(temp->Next->Data!=RNum)
                          {
                            
temp=temp->Next;

                            if(temp==NULL)
                            return 888;
                          }
                     num=temp->Next=Data;

                     temp1=temp->Next=Next;
                     free(temp->Next);
                     temp->Next=temp1;
                     return num;
                  }
        }
}
int DeleteAtEnd( void)
{
	Node * temp,*temp1;
	int num;
	if(Head==NULL)
	{
		return 999; 
	}
	elseif(Head->Next==NULL)
		{
		  temp=Head;
                                  Head=NULL;
                                  num=temp->Data;
		  free(temp);
		  return num;	
		}
		else
		{
			temp=Head;
			while(temp->Next!=NULL)
			{    temp1=temp;
				temp=temp->Next;
			}
			num=temp->Data;
			temp1->Next=NULL;
			free(temp);
			return num;
		}
	}
}
void Print(void)
{
	Node * temp;
	temp=Head;
	if(Head==NULL)
	printf("\nLink List is Empty");
	else
	{
		while(temp->Next!=NULL)
		{
			printf("%d->",temp->Data);
			temp=temp->Next;
		}
		printf("%d->NULL",temp->Data);
		
                }
}


void main(void)
{
	
	Head=NULL;
	int Choice,Num,Key;
	while(1)
	{
		printf("\nProgram to Illustrate Concept of Link List");
		printf("\n1. Create Link List");
		printf("\n2. Insert At Beg");
		printf("\n3. Insert At Mid");
		printf("\n4. Insert At End");
		printf("\n5. Delete At Beg");
                                printf("\n6. Delete At Mid");
		printf("\n7. Delete At End");
		printf("\n8. Print");
		printf("\n9. Exit");
		printf("\nEnter Your Choice\n");
		scanf("\n %d",&Choice);
		switch(Choice)
		{
			case 1: 
				  printf("\nEnter Number\n");
				   scanf("%d",&Num);
			      CreateLL(Num);
			      break;
		   
		   case 2: 
				  printf("\nEnter Number\n");
				  scanf("%d",&Num);
			      InsertAtBeg(Num);
			      break;
                                   case 3: 
				  printf("\nEnter Key and Number \n");
				  scanf("%d %d",&Key,&Num);
			      InsertAtMid(Key,Num);
			      break;
		   case 4: 
				  printf("\nEnter Number\n");
				  scanf("%d",&Num);
			      InsertAtEnd(Num);
			      break;
		    case 5:
	       	       Num=DeleteAtBeg();
	       	       if(Num==999||Num==888)
	       	       printf("\nLink List is Empty");
                                         elseif(Num==888)
	       	       printf("\nLink List is Empty");
	       	       else
	       	        printf("\nNode %d Deleted from Link List ",Num);
	       	       break;
	            case 6:
	       	       printf("\nEnter Number to Delete\n");
	       	       scanf("%d",&Key);
                                       Num=DeleteAtMid(Key);
                                       if(Num==999||Num==888)
	       	       printf("\nNumber not available in list");
	       	       else
	       	        printf("\nNode %d Deleted from Link List ",Num);
	       	       break;
                           case 7:
	       	       Num=DeleteAtEnd();
	       	       if(Num==999||Num==888)
	       	       printf("\nLink List is Empty");
	       	       else
	       	        printf("\nNode %d Deleted from Link List ",Num);
	       	       break;
	       	
	            case 8:
	       	       Print();
	       	       break;
	         case 9:
	       	       exit(0);
		}
	}
    
}


